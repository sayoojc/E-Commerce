<!doctype html>
<html lang="en" data-bs-theme="auto">

<head>
  <script src="../assets/js/color-modes.js"></script>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
  <meta name="generator" content="Hugo 0.122.0">
  <title>Checkout</title>

  <link rel="canonical" href="https://getbootstrap.com/docs/5.3/examples/checkout/">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">


  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@docsearch/css@3">

  <link href="/user/css/bootstrap.min.css.map" rel="stylesheet">
  <link rel="stylesheet" type="text/css" href="user/css/bootstrap.css" />
  <!-- font awesome style -->
  <link href="user/css/font-awesome.min.css" rel="stylesheet" />
  <!-- Custom styles for this template -->
  <link href="user/css/style.css" rel="stylesheet" />
  <!-- responsive style -->
  <link href="user/css/responsive.css" rel="stylesheet" />

  <style>
    /* .container {
  max-width: 960px;
}*/
    .bd-placeholder-img {
      font-size: 1.125rem;
      text-anchor: middle;
      -webkit-user-select: none;
      -moz-user-select: none;
      user-select: none;
    }

    @media (min-width: 768px) {
      .bd-placeholder-img-lg {
        font-size: 3.5rem;
      }
    }

    .b-example-divider {
      width: 100%;
      height: 3rem;
      background-color: rgba(0, 0, 0, .1);
      border: solid rgba(0, 0, 0, .15);
      border-width: 1px 0;
      box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
    }

    .b-example-vr {
      flex-shrink: 0;
      width: 1.5rem;
      height: 100vh;
    }

    .bi {
      vertical-align: -.125em;
      fill: currentColor;
    }

    .nav-scroller {
      position: relative;
      z-index: 2;
      height: 2.75rem;
      overflow-y: hidden;
    }

    .nav-scroller .nav {
      display: flex;
      flex-wrap: nowrap;
      padding-bottom: 1rem;
      margin-top: -1px;
      overflow-x: auto;
      text-align: center;
      white-space: nowrap;
      -webkit-overflow-scrolling: touch;
    }

    .btn-bd-primary {
      --bd-violet-bg: #712cf9;
      --bd-violet-rgb: 112.520718, 44.062154, 249.437846;

      --bs-btn-font-weight: 600;
      --bs-btn-color: var(--bs-white);
      --bs-btn-bg: var(--bd-violet-bg);
      --bs-btn-border-color: var(--bd-violet-bg);
      --bs-btn-hover-color: var(--bs-white);
      --bs-btn-hover-bg: #6528e0;
      --bs-btn-hover-border-color: #6528e0;
      --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);
      --bs-btn-active-color: var(--bs-btn-hover-color);
      --bs-btn-active-bg: #5a23c8;
      --bs-btn-active-border-color: #5a23c8;
    }

    .bd-mode-toggle {
      z-index: 1500;
    }

    .bd-mode-toggle .dropdown-menu .active .bi {
      display: block !important;
    }


    .custom-card {
      border-radius: 10px;
      /* Corner radius */
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      /* Light grey box shadow */
      background-color: #f8f9fa;
      /* Light grey background */
      padding: 15px;
      /* Padding inside the card */
    }

    .custom-div {
      border: 1px solid #ced4da;
      /* Grey border */
      border-radius: 8px;
      /* Rounded corners */
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      /* Light grey box shadow */
      padding: 15px;
      /* Padding inside the div */
    }


    .custom-div button.btn-secondary:hover {
      box-shadow: 0 0 10px rgba(0, 0, 255, 0.5);
      /* Blue box shadow on hover */
      color: blue;
      /* Blue text on hover */
    }

    .custom-card .form-control {
      width: 50px;
      /* Adjust the width here */
    }

    .minus-btn {
      margin-left: 10px;
    }

    .plus-btn {
      margin-left: 10px;
    }

    button {
      background-color: #ff8c00;
      color: white;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      text-transform: uppercase;
      font-size: 0.8rem;
      margin-left: 20px;
      border-radius: 5px;
    }

    button:hover {
      background-color: #ff7c00;

    }

    .normal-case {
      text-transform: none;
    }

    .addressChangeBtn {
      border-color: #6c757d;

    }

    .addressChangeBtn:hover {
      border-color: #6c757d;
      box-shadow: 0 4px 8px rgba(108, 117, 125, 0.5);
      /* Adjust the shadow as needed */

    }

    #orderConfirmDiv {
      display: inline-block;
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      text-align: center;
      border: 1px solid #007bff;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      text-decoration: none;
      width: auto;
      /* Adjusted to auto to fit the text */
      height: 50px;
    }

    #orderConfirmDiv:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }

    #orderConfirmDiv:active {
      background-color: #004085;
      border-color: #004085;
    }

    #backend-error {
      color: red;
      font-size: 20px;
      font-weight: bolder;
    }

    .row {
      margin-top: auto;
    }
  </style>


  <!-- Custom styles for this template -->
  <link href="checkout.css" rel="stylesheet">
</head>

<body class="bg-body-tertiary">

  <header class="header_section" style=" background-color: #fe6d74;">
    <div class="container d-flex align-items-center" style="height: 30px;">
      <nav class="navbar navbar-expand-lg custom_nav-container">
        <div class="container">
          <div class="row align-items-center">
            <div class="col">
              <h4 style="font-size: 25px;">NUTROMAX</h4>
            </div>
            <div class="col">
              <h6 class="text-right">Checkout</h6>
            </div>
          </div>
        </div>
      </nav>
    </div>
  </header>







  <main>

    <div class="container-fluid" style="padding-left: 170px; padding-right: 170px; ">



      <div class="row g-5">
        <div class="col-md-5 col-lg-4 order-md-last" style="position: fixed; margin-left: 860px; width: 400px;">
          <h4 class="d-flex justify-content-between align-items-center mb-3">
            <span class="text-primary">Checkout</span>
            <span class="  rounded-pill">
              <%=items.length%>
            </span>
          </h4>

          <ul class="list-group mb-3">
            <% if (items.length> 0) { %>
              <% items.forEach(item=> { %>
                <li class="list-group-item d-flex justify-content-between lh-sm">
                  <div>
                    <h6 class="my-0">
                      <%= item.name %>
                    </h6>
                    <small class="text-body-secondary">
                      <%= item.description %>
                    </small>
                  </div>
                  <span class="text-body-secondary">₹<%= item.price %></span>

                </li>
                <% }); %>
                  <li class="list-group-item d-flex justify-content-between bg-body-tertiary">
                    <div class="text-success">
                      <h6 class="my-0">Promo code</h6>
                      <small id="exampleCode"></small>
                    </div>
                    <span class="text-success" id="discountSpan"></span>
                  </li>
                  <li class="list-group-item d-flex justify-content-between">
                    <span>Total </span>
                    <strong>₹<%= totalPrice %></strong>
                  </li>
                  <li class="list-group-item d-flex justify-content-between">
                    <span>Total payable</span>
                    <strong id="totalPayableValue">₹<%= totalPayable %></strong>
                  </li>
                  <% } else { %>
                    <li class="list-group-item d-flex justify-content-between">
                      <span>Your cart is empty.</span>
                    </li>
                    <% } %>
                      <li class="list-group-item d-flex justify-content-between">
                        <span id="totalPayable">Total payable after coupon</span>
                        <strong></strong>
                      </li>
          </ul>
          <form class="card p-2" id="redeemCouponForm">
            <div class="input-group">
              <input type="text" id="couponCode" placeholder="Promo code" required autocapitalize="none">
              <button type="submit" class="btn btn-secondary">Redeem</button>
            </div>
          </form>

        </div>
        <div class="backendCouponError  text-danger"></div>

        <div class="col-md-7 col-lg-8 border border-dark p-3 custom-div">
          <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
              <div class="form-check me-3">
                <input class="form-check-input" type="checkbox" id="loginCheckbox" checked disabled>
                <strong> <label class="form-check-label" for="loginCheckbox">
                    Login
                  </label></strong>
              </div>
              <div>
                <%= user.name %>, <%= user.email %>
              </div>
            </div>

          </div>
        </div>


        <div class="col-md-7 col-lg-8 border pt-5 border-dark p-3 custom-div ">
          <% if (addresses.length> 0) { %>
            <div class="d-flex justify-content-between align-items-center">
              <div class="form-check me-3">
                <input class="form-check-input" type="checkbox" id="loginCheckbox" checked disabled>
                <strong>
                  <label class="form-check-label" for="loginCheckbox">
                    Deliver here
                  </label>
                </strong>
              </div>
              <div class="d-flex align-items-center">
                <% addresses.forEach(address=> { %>
                  <% if (address.default) { %>

                    <div>
                      <span><strong>
                          <%= address.name %>
                        </strong></span>
                      <%= address.address1 %>, <%= address.address2 %>, <%= address.locality %>, <%= address.city %>,
                              <%= address.pincode %>, <%= address.phone %>
                    </div>
                    <div class="me-3">
                      <button type="button" class="btn normal-case addressChangeBtn btn-primary" data-bs-toggle="modal"
                        data-bs-target="#changeAddressModal">Change</button>
                    </div>
                    <% } %>
                      <% }) %>
              </div>
            </div>
            <% } else { %>
              <div class="text-center">There is no address to select
                <button>Add Address</button>
              </div>
              <% } %>
        </div>


        <div class="col-md-7 col-lg-8 p-3 custom-div  " id="orderSummaryDiv">

          <% items.forEach(item=> { %>
            <div class="mb-3 custom-card col-md-10 col-lg-12 p-3">
              <div style="display: flex;">
                <div class="col-md-4" style="width: 100px;">
                  <% if (item.image && item.image.length> 0) { %>
                    <img src="<%= item.image[0] %>" class="img-fluid" style="max-width: 100px; max-height: 100px;"
                      alt="<%= item.name %>">
                    <% } else { %>
                      <img src="/path/to/default-image.jpg" alt="<%= item.name %>">
                      <% } %>
                </div>
                <div class="col-md-8 ">
                  <p><strong>
                      <%= item.name %>
                    </strong></p>
                  <p>
                    <%= item.description %>
                  </p>
                  <p>Price: ₹<%= item.price %>
                  </p>
                  <p>Total: ₹<%= item.price * item.quantity %>
                  </p>

                </div>
              </div>
              <div class="d-flex align-items-center">
                <button class="btn btn-outline-secondary minus-btn" type="button">-</button>
                <input type="text" class="form-control product-count mx-2" value="<%= item.quantity %>" readonly>
                <button class="btn btn-outline-secondary plus-btn" type="button">+</button>



                <button type="button" class="btn btn-danger ml-2" id="productRemoveButton"
                  data-productId="<%=item.productId%>">Remove</button>

              </div>
            </div>
            <% }); %>
              <div class="cart-summary col-md-11 col-lg-12 p-3">
                <button id="checkoutContinueButton" class="col-md-11 col-lg-12 p-3"
                  style=" position: static;">Continue</button>
              </div>
       </div>

        <!-- The order summary finish div -->
        <div class="col-md-7 col-lg-8 border border-dark p-3 custom-div " id="orderSummaryFinishDiv"
          style="height: 80px;">
          <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
              <div class="form-check me-3">
                <input class="form-check-input" type="checkbox" id="loginCheckbox" checked disabled>
                <strong> <label class="form-check-label" for="loginCheckbox">
                    Order Summary
                  </label></strong>
              </div>
              <div class="me-3" style="padding-left: 500px;">
                <button type="button" class="btn normal-case btn-primary" id="orderSummaryChangeButton">Change</button>
              </div>

            </div>

          </div>
        </div>

        <!-- payment options finish div -->

        <div class="col-md-7 col-lg-8 border border-dark p-3 custom-div " id="paymentOptionsFinishDiv"
          style="height: 80px;">
          <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
              <div class="form-check me-3">
                <input class="form-check-input" type="checkbox" id="loginCheckbox" checked disabled>
                <strong> <label class="form-check-label" for="loginCheckbox">
                    Payment Options
                  </label></strong>
              </div>
              <div class="">
                <button type="button" class="btn normal-case btn-primary" id="orderSummaryChangeButton">Change</button>
              </div>

            </div>

          </div>
        </div>



        <div class="col-md-7 col-lg-8 border border-dark p-3 custom-div" id="paymentOptionsDiv"
          style="width:100px; display: none;">
          <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
              <div class="form-check me-3">
                <input class="form-check-input" type="checkbox" id="loginCheckbox" checked disabled>
                <strong>
                  <label class="form-check-label" for="loginCheckbox">
                    Payment Options
                  </label>
                </strong>
                <div id="paymentOptions">
                  <div class="form-check" id="razorPayDiv">
                    <input class="form-check-input" type="radio" name="paymentOption" id="razorPayOption"
                      value="razorPay">
                    <label class="form-check-label" for="razorPayOption">
                      Card/Net Banking
                    </label>
                  </div>
                  <div class="form-check" id="codDiv">
                    <input class="form-check-input" type="radio" name="paymentOption" id="codOption" value="cod">
                    <label class="form-check-label" for="codOption">
                      Cash On Delivery
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>


        <div class="col-md-7 col-lg-8 border border-dark p-3 custom-div" id="orderConfirmDiv" style="width: auto;">
          Confirm Order
        </div>

        <div id="backend-error"></div>




  </main>
  </div>



  <!-- The address selector modal -->
  <div class="modal fade" id="changeAddressModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="staticBackdropLabel">Select Delivery Address</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="changeAddressForm">
            <div id="addressList">
              <!-- Dynamic address list goes here -->
              <% addresses.forEach(address=> { %>
                <div class="address-item border p-2 mb-2 d-flex align-items-start">

                  <label for="address-<%= address._id %>" class="w-100">
                    <p class="mb-1"><strong>
                        <%= address.name %>
                      </strong></p>
                    <p class="mb-1">
                      <%= address.address1 %>, <%= address.address2 %>
                    </p>
                    <p class="mb-1">
                      <%= address.locality %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %>
                    </p>
                    <p class="mb-1">Phone: <%= address.phone %>
                    </p>
                  </label>
                  <button type="button" class="btn  select-address-btn" data-id="<%= address._id %>">Select</button>
                </div>
                <% }) %>
            </div>
            <p id="currentPasswordError" class="text-danger"></p>
            <p id="backend-error" class="text-danger"></p>
            <input type="hidden" id="selectedAddressId" name="selectedAddressId">
          </form>
        </div>
      </div>
    </div>
  </div>



  <footer>

  </footer>
  </div>


  <script>
    /////////////////////fetch to redeem coupon////////////////////
    let coupon;
    document.getElementById('redeemCouponForm').addEventListener('submit', async function (event) {
      event.preventDefault(); // Prevent the form from submitting the traditional way

      const couponCode = document.getElementById('couponCode').value;

      try {
        const response = await fetch('/redeemCoupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ couponCode })
        });

        const data = await response.json();
        console.log("data:", data);

        if (response.ok && data.success) {
          document.getElementById('totalPayable').textContent = `Total Payable: ${data.totalPayable}`;
          const exampleCode = document.getElementById('exampleCode');
          exampleCode.innerText = data.coupon.code;
          const discountSpan = document.getElementById('discountSpan');
          const cartValueElement = document.getElementById('totalPayableValue');
          let cartValueText = cartValueElement.innerText;
          let numericValue = cartValueText.replace(/[^0-9.]/g, '');
          let cartValueNumber = parseFloat(numericValue);
          discountSpan.innerText = (cartValueNumber - data.totalPayable).toFixed(2);

          coupon = data.coupon._id;
          console.log('The coupon applied and the coupon id is:', coupon);
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Coupon applying failed',
            text: data.message // Access the correct message field
          });
        }
      } catch (error) {
        console.error('There was a problem with the fetch operation:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message // Display the error message in case of fetch failure
        });
      }
    });






    ////////////method to remove order summary detail page//////////////////////
    const orderSummaryDiv = document.getElementById('orderSummaryDiv');
    const checkoutContinueButton = document.getElementById('checkoutContinueButton');
    const orderSummaryFinishDiv = document.getElementById('orderSummaryFinishDiv');
    const orderConfirmDiv = document.getElementById('orderConfirmDiv');

    orderSummaryFinishDiv.style.display = 'none';
    const paymentOptionsDiv = document.getElementById('paymentOptionsDiv');
    paymentOptionsFinishDiv.style.display = 'none';
    orderConfirmDiv.style.display = 'none';


    checkoutContinueButton.addEventListener('click', function () {
      orderSummaryDiv.style.display = 'none';
      orderSummaryFinishDiv.style.display = 'block';
      paymentOptionsDiv.style.display = 'block';
      orderConfirmDiv.style.display = 'block';

    });

    const orderSummaryChangeButton = document.getElementById('orderSummaryChangeButton');

    orderSummaryChangeButton.addEventListener('click', function () {
      orderSummaryDiv.style.display = 'block';
      orderSummaryFinishDiv.style.display = 'none';
      paymentOptionsDiv.style.display = 'none';
      orderConfirmDiv.style.display = 'none' ;
    })




    document.addEventListener('DOMContentLoaded', function () {
      const selectButtons = document.querySelectorAll('.select-address-btn');

      selectButtons.forEach(button => {
        button.addEventListener('click', function () {
          const addressId = this.getAttribute('data-id');
          document.getElementById('selectedAddressId').value = addressId;

          // Send the selected address ID via an AJAX request
          submitAddressSelection(addressId);
        });
      });
    });

    function submitAddressSelection(addressId) {
      fetch('/changeAddress', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ selectedAddressId: addressId })
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Handle success, perhaps close the modal and update the UI
            console.log('Address selected successfully');
            // Close the modal
            document.querySelector('.btn-close').click();

            window.location.href = '/getCheckout';
          } else {
            document.getElementById('backend-error').textContent = data.error || 'An error occurred.';
          }

        })
        .catch(error => {
          console.error('Error:', error);
          document.getElementById('backend-error').textContent = 'An error occurred.';
        });
    }


    ///////////////////////fetch for confirm order//////////////////////

    document.addEventListener('DOMContentLoaded', function () {
      let selectedOption = '';

      // Get all radio buttons with name 'paymentOption'
      const paymentOptions = document.getElementsByName('paymentOption');

      // Add event listeners to each radio button
      paymentOptions.forEach(option => {
        option.addEventListener('change', function () {
          if (this.checked) {
            selectedOption = this.value;
            console.log('Selected payment option:', selectedOption);
          }
        });
      });

      const orderConfirmDiv = document.getElementById('orderConfirmDiv');
      orderConfirmDiv.addEventListener('click', function () {
        let amount;

        // Get the text content from the 'strong' elements and remove the '$' sign
        const redeemedAmountText = document.getElementById('totalPayable').textContent;
        console.log('The text content in the amount after the coupon redeem:', redeemedAmountText);
        const redeemedAmount = redeemedAmountText ? parseFloat(redeemedAmountText.split(': ')[1]) : null;
        console.log('The amount after the coupon redeem:', redeemedAmount);

        // Get the element by its ID
        const totalPayableElement = document.getElementById('totalPayableValue');

        // Get the text content of the element
        const totalPayableText = totalPayableElement.textContent;

        // Remove all symbols (₹ in this case) and convert to a number
        const cartAmount = parseFloat(totalPayableText.replace(/[^0-9.-]+/g, ""));

        console.log(cartAmount); // This will log the numeric value

        console.log('The amount in the cart:', cartAmount);

        if (redeemedAmount) {
          amount = redeemedAmount;
          console.log('Amount from the front end:', amount);
        } else {
          amount = cartAmount;
        }

        console.log('Final amount:', amount);
        if (selectedOption === 'razorPay') {
          console.log('The front end razorpay section hit123');
          fetch('/createRazorpayOrder', {
            method: 'post',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ amount: amount, currency: 'INR' }) // Adjust amount and currency as needed
          })
            .then(response => {
              if (!response.ok) {
                console.log('The response not ok from the createRazorPayOrder');
                return response.json().then(error => {
                  const errorMessage = error.error || JSON.stringify(error) || 'An error occurred';
                  throw new Error(errorMessage);
                });
              }
              return response.json();
            })
            .then(data => {
              console.log('The coupon from the front end theb is:', coupon);
              const options = {
                key: 'rzp_test_59UVvgnLyIsqyL',
                amount: data.amount,
                currency: data.currency,
                name: 'NUTROMAX INDIA PVT LTD',
                description: 'Test Transaction',
                image: '/your_logo.png',
                order_id: data.id,
                handler: function (response) {
                  fetch('/confirmOrder', {
                    method: 'post',
                    headers: {
                      'Content-Type': 'application/json'
                    },

                    body: JSON.stringify({
                      amount: data.amount / 100,
                      coupon: coupon,
                      paymentMethod: selectedOption,
                      razorpayPaymentId: response.razorpay_payment_id,
                      razorpayOrderId: response.razorpay_order_id,
                      razorpaySignature: response.razorpay_signature
                    })
                  })
                    .then(response => response.json())
                    .then(data => {
                      if (data.success) {
                        Swal.fire({
                          icon: 'success',
                          title: 'Order Confirmed',
                          text: 'Your order has been successfully placed!',
                        }).then(() => {
                          window.location.href = '/getCart';
                        });
                      } else {
                        Swal.fire({
                          icon: 'error',
                          title: 'Error',
                          text: data.message || 'An error occurred.',
                        });
                      }
                    })
                    .catch(error => {
                      console.error('Error:', error);
                      Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message,
                      });
                    });
                },
                prefill: {
                  name: '<%=user.name%>',
                  email: '<%=user.email%>',
                },
                theme: {
                  color: '#007bff'
                }
              };
              const rzp1 = new Razorpay(options);
              rzp1.on('payment.failed', function (response) {
                console.log('The failed razorpay function hits');
                // Close the Razorpay modal before showing the alert
                rzp1.close();
                console.log('The rzp is closed');
                fetch('/failedRazorPayOrder', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    amount: data.amount,
                    coupon: coupon,
                    paymentMethod: selectedOption
                  })
                })
                  .then(response => response.json())
                  .then(data => {
                    let swalInstance = Swal.fire({
                      icon: 'error',
                      title: 'Payment Failed',
                      text: data.message,
                      showConfirmButton: false, // Hide the default "Ok" button

                    });
                    setTimeout(function () {
                      window.location.href = '/getHome';
                    }, 2000);


                  })
                  .catch(error => {
                    console.error('Error:', error);
                    console.log('The catch block of the fetch failed payment razorpay');
                  });
              });


              rzp1.open();
            })
            .catch(error => {
              console.error('Error:', error);
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message,
              });
            });
        }else {
  Swal.fire({
    title: 'Are you sure?',
    text: 'Do you want to confirm this order?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, confirm it!'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch('/confirmOrder', {
        method: 'post',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ paymentMethod: selectedOption, coupon: coupon,amount })
      })
        .then(response => {
          if (!response.ok) {
            return response.json().then(error => {
              throw new Error(error.error || 'An error occurred');
            });
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Order Confirmed',
              text: 'Your order has been successfully placed!',
            }).then(() => {
              window.location.href = '/getCart';
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'An error occurred.',
            });
          }
        })
        .catch(error => {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message,
          });
        });
    }
  });
}

      });
    });


    ///////////////fetch to remove product from cart//////////////////

    document.addEventListener('DOMContentLoaded', function () {
      const productRemoveButton = document.querySelectorAll('#productRemoveButton');

      productRemoveButton.forEach(button => {
        const productId = button.getAttribute('data-productId');
        button.addEventListener('click', function () {
          Swal.fire({
            title: 'Are you sure?',
            text: "Do you really want to remove this product from the cart?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/removeFromCart/${productId}`, {
                method: 'DELETE',
              })
                .then(response => response.json())
                .then(data => {
                  if (data.message) {
                    // Handle success, perhaps close the modal and update the UI
                    Swal.fire({
                      title: 'Removed!',
                      text: 'The product has been removed from your cart.',
                      icon: 'success'
                    }).then(() => {
                      window.location.href = '/getCheckout';
                    });
                  } else {
                    Swal.fire({
                      title: 'Error',
                      text: data.error || 'An error occurred when deleting the product from the cart.',
                      icon: 'error'
                    });
                  }
                })
                .catch(error => {
                  console.error('Error:', error);
                  Swal.fire({
                    title: 'Error',
                    text: 'An error occurred.',
                    icon: 'error'
                  });
                });
            }
          });
        });
      });
    });

  </script>
  <!-- Include SweetAlert JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- razorpay link -->
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script src="/user/js/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>

  <script src="/user/js/checkout.js"></script>



  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

</body>

</html>