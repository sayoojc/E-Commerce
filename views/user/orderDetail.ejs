<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile Page</title>
  <link rel="stylesheet" href="/user/css/profile.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <title>NUTROMAX</title>
  <!-- bootstrap core css -->
  <link rel="stylesheet" type="text/css" href="/user/css/bootstrap.css" />
  <!-- font awesome style -->
  <link href="/user/css/font-awesome.min.css" rel="stylesheet" />

  <!-- responsive style -->
  <link href="/user/css/responsive.css" rel="stylesheet" />
  <!-- Custom styles for this template -->
  <link href="/user/css/style.css" rel="stylesheet" />
  <link rel="stylesheet" href="/user/css/my-style.css">
  <link href="https://use.fontawesome.com/releases/v5.0.1/css/all.css" rel="stylesheet">


<style>
 
 footer {
    background: #f8f8f8;
    padding: 40px 0 0px;
    margin-top: 50px;
}

.small-card {
    height: 200px; /* Adjust this value as needed */
  }
  .small-text {
    font-size: 12px; /* Adjust this value as needed */
  }

  #downloadInvoiceBtn {
    background-color: #4CAF50; /* Green background */
    color: white;             /* White text */
    padding: 15px 32px;       /* Padding around text */
    text-align: center;       /* Centered text */
    text-decoration: none;    /* Remove underline */
    display: inline-block;    /* Inline block element */
    font-size: 16px;          /* Font size */
    margin: 10px 2px;         /* Margin around button */
    border: none;             /* No border */
    border-radius: 8px;       /* Rounded corners */
    cursor: pointer;          /* Pointer cursor on hover */
    transition: background-color 0.3s; /* Smooth transition for background color */
}

#downloadInvoiceBtn:hover {
    background-color: #45a049; /* Darker green on hover */
}
.cancel-button {
      margin-right: 300px;
      padding: 10px 20px;
      background-color: red;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
    }
    .cancel-button:hover {
      background-color: darkred;
    }
    .retry-payment {
      margin-right: 400px;
      height: 40px;
  background-color: #4CAF50; /* Green background */
  border: none; /* Remove borders */
  color: white; /* White text */
  padding: 5px 10px; /* Some padding */
  text-align: center; /* Center the text */
  text-decoration: none; /* Remove underline */
  display: inline-block; /* Make the button inline element */
  font-size: 16px; /* Increase font size */
 
  cursor: pointer; /* Pointer/hand icon */
  border-radius: 12px; /* Rounded corners */
  transition: background-color 0.3s; /* Smooth transition */
}

.retry-payment:hover {
  background-color: #45a049; /* Darker green on hover */
}

.retry-payment:active {
  background-color: #3e8e41; /* Even darker green on click */
  box-shadow: 0 5px #666; /* Add shadow */
  transform: translateY(4px); /* Push the button down */
}
.returnButton {
  padding: 10px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.returnButton:hover {
  background-color: #0056b3; /* Darker shade of the primary color on hover */
}

</style>
</head>

<%-include('./header.ejs')%>
<div class="container mt-5" >
  <div class="row" style="display: flex;">
    <div class="col-md-4" style="box-shadow: h-offset v-offset blur spread color; flex: 1;">
      <div class="card mb-3" style="height: 90%;">
        <div class="card-body">
          <h5 class="card-title">Delivery Address</h5>
          <p class="card-text"><strong><%= user.name %></strong></p>
          <p class="card-text">
            <%= order.address.address1 %>, <%= order.address.address2 %>, <%= order.address.locality %>, <%= order.address.city %> - <%= order.address.pincode %>, <%= order.address.state %><br>
            <strong>Phone number:</strong> <%= order.address.phone %>
          </p>
          <p class="card-text">This order is also tracked by <%= order.address.phone %></p>
        </div>
      </div>
    </div>
    <% if (order.coupon.code) { %>
      <div class="col-md-4" style="flex: 1;">
        <div class="card mb-3" style="height: 90%;">
          <div class="card-body">
            <h5 class="card-title">Applied Coupon</h5><br>
          <strong> <p class="card-text"><%= order.coupon.code %></strong> applied<br>
              <% if (order.coupon.discountType === 'percentage') { %>
                <strong>You have saved <%= order.coupon.discountValue %>% on this order</strong>
              <% } else { %>
                <strong>You have saved ₹<%= order.coupon.discountValue %> on this order</strong>
              <% } %>
              <br>
              <br>
            
              <%let saved = order.cartValue-order.payment.amount%>
              <% if (order.cartValue < 500) saved += 59 %>
              <%Math.round(saved)%>
              <strong>You have saved ₹ <%=saved.toFixed(2)%> on this order.</strong><br><br>
              <strong>Shop More Save More!!!.</strong>
            </p>
          </div>
        </div>
      </div>
    <% } %>
    <div class="col-md-4" style="flex: 1;">
      <div class="card mb-3" style="height: 90%;">
        <div class="card-body">
          <h5 class="card-title">More Actions</h5>
          <%if(order.payment.status==='Failed'){%>
          <button class="retry-payment" id="retryPaymentBtn" data-product-id="<%=order._id%>">Retry payment</button>
         <strong> <p id="retryPaymentAmount">₹<%=order.payment.amount%>/-</p></strong>
         <%}else if(order.payment.status === 'paid'){%>
          <form action="/invoiceDownload/<%=order._id%>" method="get">
          <button type="submit" id="downloadInvoiceBtn" data-product-id="<%=order._id%>">Download Invoice</button>
        </form>
         <%}%>
          <p class="card-text">Early Access to this Sale<br><small>For Plus Members</small></p>
        </div>
      </div>
    </div>
  </div>
  
    <%order.products.forEach(product =>{%>


    <div class="card" style="margin-top: 20px;">
      <div class="card-body">
        <div class="row">
          <div class="col-md-3">
            <img src="/<%=product.productImage%>" class="img-fluid" alt="Product Image" style="width: 130px;">
          </div>
          <div class="col-md-9">
            <h5 class="card-title"><%=product.productName%></h5>
            <p class="card-text">
             
              <strong>Price:</strong> ₹<%=product.price%><br>
              <%if(order.coupon.code){%>
              <strong>Offer Applied:</strong> 1 Offer Applied
              <%}%>
            </p>
            <div class="d-flex justify-content-between">
                <%let orderTime = order.orderDate%>
                <%const date = new Date(orderTime)%>
                <% const options = { year: 'numeric', month: 'short', day: '2-digit' };%>
                <% const formattedDate = date.toLocaleDateString('en-US', options);%>
                 <%if(product.orderStatus === "Order Pending"){%>
                  <p class="card-text text-danger"><strong><%=product.orderStatus%></strong><br><small><%=formattedDate%></small> Due to payment <%=order.payment.status%></p>
                   
                  

              
               <% }else if(product.orderStatus==='Cancelled'){%>
               <p class="card-text text-danger"><strong>Cancelled</strong><br><small><%=product.orderStatusUpdatedAt%></small></p>
               <%}else if(product.orderStatus === 'delivered'){%>
                <p class="card-text text-success"><strong><%=product.orderStatus%></strong><br><small></small></p>
                <button type="button" class="returnButton" id="returnButton" data-orderId="<%=order._id%>"  data-product-id="<%=product.productId%>">Return product</button>
                <%}else if(product.orderStatus === 'returned'){%>
                  <p class="card-text text-danger"><strong>Order <%=product.orderStatus%></strong><br><small>The Return amount will be credited to your account within the next 5 buissness days.</small></p>
               <%} else {%>
                <p class="card-text text-success"><strong><%=product.orderStatus%></strong><br><small></small></p>
                <button type="button" class="cancel-button" id="cancelOrderButton" data-orderId="<%=order._id%>" data-productId="<%=product.productId%>" data-count="<%=product.count%>">Cancel Order</button>

                <%}%>
            </div>
            <p class="card-text">You requested a cancellation because of issues with the delivery date.<br><small>Wed, 5th Jun, 4:45 pm - Item cancelled by you</small></p>
            
          </div>
        </div>
      </div>
    </div>
    <%})%>
  </div>
  
<%-include('./footer.ejs')%>

<script>
/////////////////return product//////////////////////


document.addEventListener('DOMContentLoaded', function () {
  const returnButton = document.getElementById('returnButton');

  returnButton.addEventListener('click', function () {
    const orderId = returnButton.getAttribute('data-orderId');
    const productId = returnButton.getAttribute('data-product-id');

    fetch(`/returnProduct/${orderId}/${productId}`, {
      method: 'PUT', // Use PUT method for updating data
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ orderId, productId })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to update order status');
      }
      return response.json();
    })
    .then(data => {
      // Optionally handle success response
      console.log('Order status updated successfully:', data);
      // You can show a success message or update UI as needed
    })
    .catch(error => {
      console.error('Error updating order status:', error);
      // Handle error scenario, show error message, etc.
    });
  });
});







  /////////////cancel order///////////////////
 document.addEventListener('DOMContentLoaded', () => {
    const cancelButtons = document.querySelectorAll('#cancelOrderButton');

    cancelButtons.forEach(button => {
        const orderId = button.getAttribute('data-orderId');
        const productId = button.getAttribute('data-productId');
        const count = button.getAttribute('data-count');

        button.addEventListener('click', function () {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you really want to cancel this order?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, cancel it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/cancelOrder', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId, productId, count })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Cancelled!',
                                text: 'Your order has been cancelled.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                'There was an error cancelling your order. Please try again.',
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        Swal.fire(
                            'Error!',
                            'There was an error cancelling your order. Please try again.',
                            'error'
                        );
                    });
                }
            });
        });
    });
});



////////////// retry payment ///////////////////
      document.addEventListener('DOMContentLoaded', function () {

      const retryPaymentBtn = document.getElementById('retryPaymentBtn');
      console.log(retryPaymentBtn);
      retryPaymentBtn.addEventListener('click', function () {
        console.log('The retry payment button clicked');
        let amountText = document.getElementById('retryPaymentAmount').innerText;
        console.log('amount text',amountText);
        let amount = amountText.replace(/[^\d.]/g, '');

         amount = parseFloat(amount); 
         amount = amount;
         const orderId = retryPaymentBtn.dataset.productId;
         console.log('orderId',orderId);

        console.log('Final amount:', amount);
          console.log('The front end razorpay section hit123');
          fetch('/createRazorpayOrder', {
            method: 'post',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ amount: amount, currency: 'INR' }) // Adjust amount and currency as needed
          })
            .then(response => {
              if (!response.ok) {
                console.log('The response not ok from the createRazorPayOrder');
                return response.json().then(error => {
                  const errorMessage = error.error || JSON.stringify(error) || 'An error occurred';
                  throw new Error(errorMessage);
                });
              }
              return response.json();
            })
            .then(data => {
             console.log('The data block inside the create razorpay orders');

              const options = {
                key: 'rzp_test_59UVvgnLyIsqyL',
                amount: data.amount,
                currency: data.currency,
                name: 'NUTROMAX INDIA PVT LTD',
                description: 'Test Transaction',
                image: '/your_logo.png',
                order_id: data.id,
                handler: function (response) {
                  fetch(`/retryConfirmOrder`, {
                    method: 'post',
                    headers: {
                      'Content-Type': 'application/json'
                    },

                    body: JSON.stringify({
                      orderId:orderId,
                      amount: data.amount / 100,
                      paymentMethod:'razorPay',
                    
                      razorpayPaymentId: response.razorpay_payment_id,
                      razorpayOrderId: response.razorpay_order_id,
                      razorpaySignature: response.razorpay_signature
                    })
                  })
                    .then(response => response.json())
                    .then(data => {
                      if (data.success) {
                        Swal.fire({
                          icon: 'success',
                          title: 'Order Confirmed',
                          text: 'Your order has been successfully placed!',
                        }).then(() => {
                          window.location.reload();
                        });
                      } else {
                        Swal.fire({
                          icon: 'error',
                          title: 'Error',
                          text: data.message || 'An error occurred.',
                        });
                      }
                    })
                    .catch(error => {
                      console.error('Error:', error);
                      Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message,
                      });
                    });
                },
                prefill: {
                  name: '<%=user.name%>',
                  email: '<%=user.email%>',
                },
                theme: {
                  color: '#007bff'
                }
              };
              const rzp1 = new Razorpay(options);
              rzp1.on('payment.failed', function(response) {
  console.log('The failed razorpay function hits');
  // Close the Razorpay modal before showing the alert
  rzp1.close();
  console.log('The rzp is closed');
 
  
  swal.fire({
    icon: 'error',
    title: 'Error',
    text: 'Payment Failed',
    showConfirmButton: false,  // Hide the OK button
    timer: 1500  
  });
 // Delay the appearance of the popup by 3 seconds




 
});


              rzp1.open();
            })
            .catch(error => {
              console.error('Errorrrrr:', error);
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message,
              });
            });
        
      });
    });

</script>
  <!-- razorpay link -->
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <!-- jQery -->
    <script src="/user/js/jquery-3.4.1.min.js"></script>
    <!-- popper js -->
    <script src="/user/js/popper.min.js"></script>
    <!-- bootstrap js -->
    <script src="/user/js/bootstrap.js"></script>
    <!-- custom js -->
    <script src="/user/js/custom.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"></script>
  </body>

</html>











